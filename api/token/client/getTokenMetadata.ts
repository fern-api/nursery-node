/**
 * This file auto-generated by Fern from our API Definition.
 */

import { NurseryApi } from "../../..";
import * as core from "../../../core";

export type Response = core.APIResponse<
  NurseryApi.token.TokenMetadata,
  NurseryApi.token.getTokenMetadata.Error
>;
export type Error = Error.TokenNotFoundError | Error._Unknown;

export declare namespace Error {
  interface TokenNotFoundError extends _Utils {
    errorName: "TokenNotFoundError";
  }

  interface _Unknown extends _Utils {
    errorName: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <Result>(visitor: Error._Visitor<Result>) => Result;
  }

  interface _Visitor<Result> {
    tokenNotFoundError: () => Result;
    _other: (value: core.Fetcher.Error) => Result;
  }
}

export const Error = {
  tokenNotFoundError: (): Error.TokenNotFoundError => ({
    errorName: "TokenNotFoundError",
    _visit: (visitor) => visitor.tokenNotFoundError(),
  }),
} as const;
