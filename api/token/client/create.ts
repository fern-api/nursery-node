/**
 * This file auto-generated by Fern from our API Definition.
 */

import { FernNurseryApi } from "../../..";
import * as core from "../../../core";

export type Response = core.APIResponse<FernNurseryApi.token.CreateTokenResponse, FernNurseryApi.token.create.Error>;
export type Error = Error.OwnerNotFoundError | Error._Unknown;

export declare namespace Error {
  interface OwnerNotFoundError extends _Utils {
    errorName: "OwnerNotFoundError";
  }

  interface _Unknown extends _Utils {
    errorName: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <Result>(visitor: Error._Visitor<Result>) => Result;
  }

  interface _Visitor<Result> {
    ownerNotFoundError: () => Result;
    _other: (value: core.Fetcher.Error) => Result;
  }
}

export const Error = {
  ownerNotFoundError: (): Error.OwnerNotFoundError => {
    const valueWithoutVisit: Omit<Error.OwnerNotFoundError, "_visit"> = {
      errorName: "OwnerNotFoundError",
    };
    Object.defineProperty(valueWithoutVisit, "_visit", {
      enumerable: false,
      writable: true,
    });
    const castedValue = valueWithoutVisit as Error.OwnerNotFoundError;
    castedValue._visit = (visitor) => visitor.ownerNotFoundError();
    return castedValue;
  },
} as const;
