/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { FernNurseryApi } from "../../..";
import * as core from "../../../core";

export const Response: core.schemas.Schema<
  serializers.token.TokenMetadata.Raw[],
  FernNurseryApi.token.TokenMetadata[]
> = core.schemas.list(core.schemas.lazyObject(() => serializers.token.TokenMetadata));
export const Error: core.schemas.Schema<Error.Raw, FernNurseryApi.token.getTokensForOwner.Error> = core.schemas
  .union("errorName", {
    OwnerNotFoundError: core.schemas.object({}),
  })
  .transform<FernNurseryApi.token.getTokensForOwner.Error>({
    parse: (value) => {
      switch (value.errorName) {
        case "OwnerNotFoundError": {
          return FernNurseryApi.token.getTokensForOwner.Error.ownerNotFoundError();
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.OwnerNotFoundError;

  interface OwnerNotFoundError {
    errorName: "OwnerNotFoundError";
  }
}
