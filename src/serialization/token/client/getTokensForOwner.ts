/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { FernNursery } from "@fern-api/nursery";
import * as core from "../../../core";

export const Response: core.schemas.Schema<serializers.TokenMetadata.Raw[], FernNursery.TokenMetadata[]> =
  core.schemas.list(core.schemas.lazyObject(async () => (await import("../..")).TokenMetadata));
export const Error: core.schemas.Schema<Error.Raw, FernNursery.token.getTokensForOwner.Error> = core.schemas
  .union("errorName", {
    OwnerNotFoundError: core.schemas.object({}),
  })
  .transform<FernNursery.token.getTokensForOwner.Error>({
    parse: (value) => {
      switch (value.errorName) {
        case "OwnerNotFoundError":
          return FernNursery.token.getTokensForOwner.Error.ownerNotFoundError();
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.OwnerNotFoundError;

  interface OwnerNotFoundError {
    errorName: "OwnerNotFoundError";
  }
}
