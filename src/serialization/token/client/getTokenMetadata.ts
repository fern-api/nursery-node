/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { FernNursery } from "@fern-api/nursery";
import * as core from "../../../core";

export const Request: core.schemas.Schema<
  serializers.token.getTokenMetadata.Request.Raw,
  FernNursery.GetTokenMetadataRequest
> = core.schemas.object({
  token: core.schemas.string(),
});

export declare namespace Request {
  interface Raw {
    token: string;
  }
}

export const Response: core.schemas.Schema<serializers.token.getTokenMetadata.Response.Raw, FernNursery.TokenMetadata> =
  core.schemas.lazyObject(async () => (await import("../..")).TokenMetadata);

export declare namespace Response {
  type Raw = serializers.TokenMetadata.Raw;
}

export const Error: core.schemas.Schema<
  serializers.token.getTokenMetadata.Error.Raw,
  FernNursery.token.getTokenMetadata.Error
> = core.schemas
  .union("errorName", {
    TokenNotFoundError: core.schemas.object({}),
  })
  .transform<FernNursery.token.getTokenMetadata.Error>({
    parse: (value) => {
      switch (value.errorName) {
        case "TokenNotFoundError":
          return FernNursery.token.getTokenMetadata.Error.tokenNotFoundError();
      }
    },
    json: (value) => value as any,
  });

export declare namespace Error {
  type Raw = Error.TokenNotFoundError;

  interface TokenNotFoundError {
    errorName: "TokenNotFoundError";
  }
}
