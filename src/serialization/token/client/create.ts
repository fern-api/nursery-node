/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../..";
import { FernNursery } from "@fern-api/nursery";
import * as core from "../../../core";

export const Request: core.schemas.Schema<serializers.token.create.Request.Raw, FernNursery.CreateTokenRequest> =
  core.schemas.object({
    ownerId: core.schemas.lazy(async () => (await import("../..")).OwnerId),
    description: core.schemas.string().optional(),
  });

export declare namespace Request {
  interface Raw {
    ownerId: serializers.OwnerId.Raw;
    description?: string | null;
  }
}

export const Response: core.schemas.Schema<serializers.token.create.Response.Raw, FernNursery.CreateTokenResponse> =
  core.schemas.lazyObject(async () => (await import("../..")).CreateTokenResponse);

export declare namespace Response {
  type Raw = serializers.CreateTokenResponse.Raw;
}

export const Error: core.schemas.Schema<serializers.token.create.Error.Raw, FernNursery.token.create.Error> =
  core.schemas
    .union("errorName", {
      OwnerNotFoundError: core.schemas.object({}),
    })
    .transform<FernNursery.token.create.Error>({
      parse: (value) => {
        switch (value.errorName) {
          case "OwnerNotFoundError":
            return FernNursery.token.create.Error.ownerNotFoundError();
        }
      },
      json: (value) => value as any,
    });

export declare namespace Error {
  type Raw = Error.OwnerNotFoundError;

  interface OwnerNotFoundError {
    errorName: "OwnerNotFoundError";
  }
}
