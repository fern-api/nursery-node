/**
 * This file auto-generated by Fern from our API Definition.
 */

import { FernNurseryApi } from "../../..";
import * as core from "../../../core";

export const TokenStatus: core.schemas.Schema<TokenStatus.Raw, FernNurseryApi.token.TokenStatus> = core.schemas
  .union("type", {
    active: core.schemas.object({}),
    expired: core.schemas.object({}),
    revoked: core.schemas.object({}),
  })
  .transform<FernNurseryApi.token.TokenStatus>({
    parse: (value) => {
      switch (value.type) {
        case "active": {
          return FernNurseryApi.token.TokenStatus.active();
        }
        case "expired": {
          return FernNurseryApi.token.TokenStatus.expired();
        }
        case "revoked": {
          return FernNurseryApi.token.TokenStatus.revoked();
        }
        default: {
          return {
            ...(value as any),
            _visit: (visitor) => visitor._other(value),
          };
        }
      }
    },
    json: (value) => value as any,
  });

export declare namespace TokenStatus {
  type Raw = TokenStatus.Active | TokenStatus.Expired | TokenStatus.Revoked;

  interface Active {
    type: "active";
  }

  interface Expired {
    type: "expired";
  }

  interface Revoked {
    type: "revoked";
  }
}
