/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { AcmeGizmoApi } from "@cognodyne/nursery";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";
import * as core from "../../../core";

export declare namespace Client {
  interface Options {
    environment: string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async createMovie(request: AcmeGizmoApi.CreateMovieRequest): Promise<AcmeGizmoApi.imdb.createMovie.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, "/movies/create-movie"),
      method: "POST",
      body: await serializers.imdb.createMovie.Request.json(request),
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.imdb.createMovie.Response.parse(
          _response.body as serializers.imdb.createMovie.Response.Raw
        ),
      };
    }

    return {
      ok: false,
      error: AcmeGizmoApi.imdb.createMovie.Error._unknown(_response.error),
    };
  }

  public async getMovie(movieId: AcmeGizmoApi.MovieId): Promise<AcmeGizmoApi.imdb.getMovie.Response> {
    const _response = await core.fetcher({
      url: urlJoin(this.options.environment, `/movies/${movieId}`),
      method: "GET",
    });
    if (_response.ok) {
      return {
        ok: true,
        body: await serializers.imdb.getMovie.Response.parse(_response.body as serializers.imdb.getMovie.Response.Raw),
      };
    }

    if (_response.error.reason === "status-code") {
      switch (_response.error.statusCode) {
        case 404:
          return {
            ok: false,
            error: AcmeGizmoApi.imdb.getMovie.Error.movieDoesNotExistError(
              await serializers.MovieDoesNotExistError.parse(
                _response.error.body as serializers.MovieDoesNotExistError.Raw
              )
            ),
          };
      }
    }

    return {
      ok: false,
      error: AcmeGizmoApi.imdb.getMovie.Error._unknown(_response.error),
    };
  }
}
