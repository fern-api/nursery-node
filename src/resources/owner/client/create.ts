/**
 * This file auto-generated by Fern from our API Definition.
 */

import { FernNursery } from "@fern-api/nursery";
import * as core from "../../../core";

export type Response = core.APIResponse<void, FernNursery.owner.create.Error>;
export type Error = FernNursery.owner.create.Error.OwnerAlreadyExistsError | FernNursery.owner.create.Error._Unknown;

export declare namespace Error {
  interface OwnerAlreadyExistsError extends _Utils {
    errorName: "OwnerAlreadyExistsError";
  }

  interface _Unknown extends _Utils {
    errorName: void;
    content: core.Fetcher.Error;
  }

  interface _Utils {
    _visit: <_Result>(visitor: FernNursery.owner.create.Error._Visitor<_Result>) => _Result;
  }

  interface _Visitor<_Result> {
    ownerAlreadyExistsError: () => _Result;
    _other: (value: core.Fetcher.Error) => _Result;
  }
}

export const Error = {
  ownerAlreadyExistsError: (): FernNursery.owner.create.Error.OwnerAlreadyExistsError => {
    const valueWithoutVisit: Omit<FernNursery.owner.create.Error.OwnerAlreadyExistsError, "_visit"> = {
      errorName: "OwnerAlreadyExistsError",
    };
    return core.addNonEnumerableProperty(valueWithoutVisit, "_visit", function <
      _Result
    >(this: FernNursery.owner.create.Error.OwnerAlreadyExistsError, visitor: FernNursery.owner.create.Error._Visitor<_Result>) {
      return FernNursery.owner.create.Error._visit(this, visitor);
    });
  },

  _visit: <_Result>(
    value: FernNursery.owner.create.Error,
    visitor: FernNursery.owner.create.Error._Visitor<_Result>
  ): _Result => {
    switch (value.errorName) {
      case "OwnerAlreadyExistsError":
        return visitor.ownerAlreadyExistsError();
      default:
        return visitor._other(visitor as any);
    }
  },
} as const;
