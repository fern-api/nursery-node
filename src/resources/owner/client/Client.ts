/**
 * This file auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../environments";
import { FernNurseryApi } from "../../..";
import urlJoin from "url-join";
import * as serializers from "../../../serialization";
import * as core from "../../../core";

export declare namespace Client {
  interface Options {
    environment?: environments.Environment | string;
  }
}

export class Client {
  constructor(private readonly options: Client.Options) {}

  public async create(request: FernNurseryApi.owner.CreateOwnerRequest): Promise<FernNurseryApi.owner.create.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Prod, "/owner/"),
      method: "POST",
      body: serializers.owner.CreateOwnerRequest.json(request),
    });
    if (response.ok) {
      return {
        ok: true,
        body: undefined,
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as serializers.owner.create.Error.Raw)?.errorName) {
        case "OwnerAlreadyExistsError":
          return {
            ok: false,
            error: serializers.owner.create.Error.parse(response.error.body as serializers.owner.create.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async get(request: FernNurseryApi.owner.get.Request): Promise<FernNurseryApi.owner.get.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Prod, `/owner/${request.ownerId}`),
      method: "GET",
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.owner.Owner.parse(response.body as serializers.owner.Owner.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as serializers.owner.get.Error.Raw)?.errorName) {
        case "OwnerNotFoundError":
          return {
            ok: false,
            error: serializers.owner.get.Error.parse(response.error.body as serializers.owner.get.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }

  public async update(request: FernNurseryApi.owner.update.Request): Promise<FernNurseryApi.owner.update.Response> {
    const response = await core.fetcher({
      url: urlJoin(this.options.environment ?? environments.Environment.Prod, `/owner/${request.ownerId}`),
      method: "PUT",
      body: serializers.owner.UpdateOwnerRequest.json(request._body),
    });
    if (response.ok) {
      return {
        ok: true,
        body: serializers.owner.Owner.parse(response.body as serializers.owner.Owner.Raw),
      };
    }

    if (response.error.reason === "status-code") {
      switch ((response.error.body as serializers.owner.update.Error.Raw)?.errorName) {
        case "OwnerNotFoundError":
          return {
            ok: false,
            error: serializers.owner.update.Error.parse(response.error.body as serializers.owner.update.Error.Raw),
          };
      }
    }

    return {
      ok: false,
      error: {
        errorName: undefined,
        content: response.error,
        _visit: (visitor) => visitor._other(response.error),
      },
    };
  }
}
